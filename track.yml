slug: cloud-run-lab-1
id: 5ynkkohxmi5r
type: track
title: Cloud Run Lab 1
teaser: Build and deploy a container
description: ""
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/docker.png
tags:
- basic
- cloud run
owner: binxio
developers:
- wietsevenema@binx.io
private: false
published: true
challenges:
- slug: 01-read-source
  id: 8mliekvyyjpb
  type: challenge
  title: Introduction
  assignment: |
    Explore the source code here and press *Check* when you have. You don't need
    to read every line, just make sure you have a mental model of what's here. Reading
    this description might be enough.

    This is what you are looking at: it's a Go app that shows
    one page with information about the server it runs on.

    - **index.html**: A html template for the page
    - **main.go**: The main program (it starts an HTTP server)
    - **go.mod**: A list of dependencies
    - **Dockerfile**: A recipe you use to build and package the source into a container image using Docker
  notes:
  - type: text
    contents: |
      **Welcome to your lab: Introduction to Cloud Run**

      Use the **<** and **>** buttons to learn more about your assignment!
  - type: text
    contents: |
      **This is Google Cloud Run**

      ![](https://binxio-static-assets.firebaseapp.com/instruqt/cloud-run-lab-1/cloud-run.png)
  - type: text
    contents: |
      **Cloud Run uses Artifact Registry to stage container images**

      ![](https://binxio-static-assets.firebaseapp.com/instruqt/cloud-run-lab-1/ar-to-cr.png)
  - type: text
    contents: |
      **Your first tasks are to:**

      1. *Create a repository* in Artifact Registry
      2. *Build a container image* using Docker
      3. *Push the container image* to the repository
      4. *Deploy* the container image to Cloud Run

      When that's done, you'll practice making and deploying changes and
      experience the *source-based* workflow.
  tabs:
  - title: Editor
    type: code
    hostname: shell
    path: /root/app
  difficulty: basic
  timelimit: 360
- slug: 02-create-repo
  id: k0i01yaq5uhz
  type: challenge
  title: Create a docker repository
  assignment: |
    A docker repository on Artifact Registry is private by default,
    and you can customize access control using Cloud IAM.

    First, create one using this command:
    ```
    gcloud artifacts repositories create \
      --repository-format docker \
      repo
    ```
  notes:
  - type: text
    contents: |
      **Artifact Registry is a universal package manager on Google Cloud**

      ![](https://binxio-static-assets.firebaseapp.com/instruqt/cloud-run-lab-1/ar-universal.png)
  - type: text
    contents: |
      **Create a Docker repository on Artifact Registry**

      Your task is to create a Docker repository. Cloud Run can (only) pull container images
      from here.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
- slug: 03-build-image
  id: weho2mgckpyp
  type: challenge
  title: Build the container image
  assignment: |
    Build a container image using Docker. First,
    set the image URL as an environment variable:

    ```
    PROJECT=$(gcloud config get-value project)
    IMAGE=us-docker.pkg.dev/$PROJECT/repo/app

    ```

    Now, use docker to build the container image and
    tag it with the image URL.

    ```
    docker build . --tag $IMAGE
    ```

    You'll push this image to Artifact Registry in the next
    step.
  notes:
  - type: text
    contents: |
      **Build the container image using Docker**

      In this step, you'll build the container image using
      Docker.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
- slug: 04-push-image
  id: 30ixfbt1eglo
  type: challenge
  title: Push the container image
  assignment: |
    First, tell Docker to use gcloud for authentication

    You'll only need to do this once as you're telling
    Docker to use **gcloud** to authenticate if you push
    to **us-docker.pkg.dev**, and it'll remember it next time.

    ```
    gcloud auth configure-docker us-docker.pkg.dev
    ```

    Push the container image to Artifact Registry

    ```
    docker push $IMAGE
    ```
  notes:
  - type: text
    contents: |
      **Push the container image to Artifact Registry**

      First, tell Docker to authenticate using gcloud
      when talking to Artifact Registry, then push the image.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
- slug: 05-run-deploy
  id: igztpdxxpmka
  type: challenge
  title: Deploy to Cloud Run
  assignment: |
    Now that you pushed the container image
    to Artifact Registry, you can deploy it to Cloud Run!

    The next command deploys the container image and returns
    an HTTPS url.

    ```
    gcloud run deploy \
      --image $IMAGE \
      --allow-unauthenticated \
      app
    ```

    Make sure to visit the *.run.app URL that is returned by
    the command.
  notes:
  - type: text
    contents: |
      Deploy to Cloud Run
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
- slug: 06-edit-deploy
  id: vfypuqhx2txe
  type: challenge
  title: The full workflow
  assignment: |
    Make a change to the `<h1>` title of the page
    and deploy the app again. This involves building and pushing
    the container image again.

    This time, there are no easy snippets to copy and paste. You've
    learned enough to make this happen, don't worry!

    ---

    ## Hints
    The shell is in the second tab!

    If you use the editor to edit **index.html**, press the little floppy disk to save it.

    The environment variable `$IMAGE` still holds the container image
    URL in Artifact Registry. You'll need it to build and tag the container image.

    `gcloud run services` tells you the available commands to list, update
    and deploy services.
  notes:
  - type: text
    contents: |
      **Experience the full workflow**

      No more snippets to copy & paste, the training wheels go off.

      1. Edit the source
      2. Build and package the container image
      3. Deploy to Cloud Run
  tabs:
  - title: Editor
    type: code
    hostname: shell
    path: /root/app
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 900
- slug: 07-delete-dockerfile
  id: mtcp8xdk2s6r
  type: challenge
  title: Delete the Dockerfile
  assignment: |
    For some, this will be very satisfying. I'm not picking sides.

    A container-based workflow is great if you want to control
    what file ends up in the container image, and how it gets there.

    Sometimes, that responsibility is too much and you want your vendor
    to turn your source code into a container image.

    ```
    rm /root/app/Dockerfile
    ```
  notes:
  - type: text
    contents: |
      It's time to delete that Dockerfile now.

      You don't *need* to be a container expert to be productive
      with Cloud Run, and if you are one, Cloud Run won't be
      in your way.
  tabs:
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
- slug: 08-source-based-deploy
  id: cegsisw4mr7d
  type: challenge
  title: Source-based deploy
  assignment: |
    If you like Cloud Run to take care of turning your
    source code into a container image, that's fine too.

    Change the title again (or you won't be able to tell the difference),
    and deploy the app again.

    ```
    gcloud beta run deploy \
      --source . \
      app
    ```
  notes:
  - type: text
    contents: |
      Get ready for a source-based deploy!
  tabs:
  - title: Editor
    type: code
    hostname: shell
    path: /root/app
  - title: Shell
    type: terminal
    hostname: shell
  difficulty: basic
  timelimit: 360
checksum: "961864017346950973"
